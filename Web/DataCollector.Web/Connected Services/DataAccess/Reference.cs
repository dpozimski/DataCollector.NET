//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasureDevice", Namespace="http://schemas.datacontract.org/2004/07/DataCollector.Server.DataAccess.Models.En" +
        "tities")]
    public partial class MeasureDevice : DataAccess.BaseTable
    {
        
        private string ArchitectureField;
        
        private string IPv4Field;
        
        private bool IsConnectedField;
        
        private string MacAddressField;
        
        private double MeasurementsMsRequestIntervalField;
        
        private string ModelField;
        
        private string NameField;
        
        private string WinVerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Architecture
        {
            get
            {
                return this.ArchitectureField;
            }
            set
            {
                this.ArchitectureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4
        {
            get
            {
                return this.IPv4Field;
            }
            set
            {
                this.IPv4Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected
        {
            get
            {
                return this.IsConnectedField;
            }
            set
            {
                this.IsConnectedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MacAddress
        {
            get
            {
                return this.MacAddressField;
            }
            set
            {
                this.MacAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MeasurementsMsRequestInterval
        {
            get
            {
                return this.MeasurementsMsRequestIntervalField;
            }
            set
            {
                this.MeasurementsMsRequestIntervalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model
        {
            get
            {
                return this.ModelField;
            }
            set
            {
                this.ModelField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WinVer
        {
            get
            {
                return this.WinVerField;
            }
            set
            {
                this.WinVerField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseTable", Namespace="http://schemas.datacontract.org/2004/07/DataCollector.Server.DataAccess.Models.En" +
        "tities")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DataAccess.MeasureDevice))]
    public partial class BaseTable : object
    {
        
        private int IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeasureType", Namespace="http://schemas.datacontract.org/2004/07/DataCollector.Server.DataAccess.Models")]
    public enum MeasureType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Humidity = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Temperature = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AirPressure = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimePoint", Namespace="http://schemas.datacontract.org/2004/07/LiveCharts.Defaults")]
    public partial class DateTimePoint : object
    {
        
        private System.DateTime DateTimeField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime
        {
            get
            {
                return this.DateTimeField;
            }
            set
            {
                this.DateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SphereMeasureType", Namespace="http://schemas.datacontract.org/2004/07/DataCollector.Server.DataAccess.Models")]
    public enum SphereMeasureType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gyroscope = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accelerometer = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataAccess.IMeasureAccessService")]
    public interface IMeasureAccessService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureAccessService/UpdateDeviceRequestInterval", ReplyAction="http://tempuri.org/IMeasureAccessService/UpdateDeviceRequestIntervalResponse")]
        System.Threading.Tasks.Task UpdateDeviceRequestIntervalAsync(string macAddress, double requestInterval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureAccessService/GetMeasureDevices", ReplyAction="http://tempuri.org/IMeasureAccessService/GetMeasureDevicesResponse")]
        System.Threading.Tasks.Task<DataAccess.MeasureDevice[]> GetMeasureDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureAccessService/GetMeasures", ReplyAction="http://tempuri.org/IMeasureAccessService/GetMeasuresResponse")]
        System.Threading.Tasks.Task<DataAccess.DateTimePoint[][]> GetMeasuresAsync(DataAccess.MeasureType type, DataAccess.MeasureDevice device, System.DateTime lowerRange, System.DateTime upperRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureAccessService/GetSphereMeasures", ReplyAction="http://tempuri.org/IMeasureAccessService/GetSphereMeasuresResponse")]
        System.Threading.Tasks.Task<DataAccess.DateTimePoint[][]> GetSphereMeasuresAsync(DataAccess.SphereMeasureType type, DataAccess.MeasureDevice device, System.DateTime lowerRange, System.DateTime upperRange);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public interface IMeasureAccessServiceChannel : DataAccess.IMeasureAccessService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public partial class MeasureAccessServiceClient : System.ServiceModel.ClientBase<DataAccess.IMeasureAccessService>, DataAccess.IMeasureAccessService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MeasureAccessServiceClient() : 
                base(MeasureAccessServiceClient.GetDefaultBinding(), MeasureAccessServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMeasureAccessService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MeasureAccessServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MeasureAccessServiceClient.GetBindingForEndpoint(endpointConfiguration), MeasureAccessServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MeasureAccessServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MeasureAccessServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MeasureAccessServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MeasureAccessServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MeasureAccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task UpdateDeviceRequestIntervalAsync(string macAddress, double requestInterval)
        {
            return base.Channel.UpdateDeviceRequestIntervalAsync(macAddress, requestInterval);
        }
        
        public System.Threading.Tasks.Task<DataAccess.MeasureDevice[]> GetMeasureDevicesAsync()
        {
            return base.Channel.GetMeasureDevicesAsync();
        }
        
        public System.Threading.Tasks.Task<DataAccess.DateTimePoint[][]> GetMeasuresAsync(DataAccess.MeasureType type, DataAccess.MeasureDevice device, System.DateTime lowerRange, System.DateTime upperRange)
        {
            return base.Channel.GetMeasuresAsync(type, device, lowerRange, upperRange);
        }
        
        public System.Threading.Tasks.Task<DataAccess.DateTimePoint[][]> GetSphereMeasuresAsync(DataAccess.SphereMeasureType type, DataAccess.MeasureDevice device, System.DateTime lowerRange, System.DateTime upperRange)
        {
            return base.Channel.GetSphereMeasuresAsync(type, device, lowerRange, upperRange);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMeasureAccessService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMeasureAccessService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:57412/MeasureAccessService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MeasureAccessServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMeasureAccessService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MeasureAccessServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMeasureAccessService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMeasureAccessService,
        }
    }
}
